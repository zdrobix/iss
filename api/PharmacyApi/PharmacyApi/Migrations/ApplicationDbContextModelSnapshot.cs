// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PharmacyApi.Data;

#nullable disable

namespace PharmacyApi.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("PharmacyApi.Models.Domain.Drug", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("Price")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.ToTable("Drugs", (string)null);
                });

            modelBuilder.Entity("PharmacyApi.Models.Domain.DrugStorage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.HasKey("Id");

                    b.ToTable("DrugStorages", (string)null);
                });

            modelBuilder.Entity("PharmacyApi.Models.Domain.Hospital", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OrderContainerId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OrderContainerId");

                    b.ToTable("Hospitals", (string)null);
                });

            modelBuilder.Entity("PharmacyApi.Models.Domain.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime2");

                    b.Property<int?>("OrderEntityContainerId")
                        .HasColumnType("int");

                    b.Property<int>("PlacedById")
                        .HasColumnType("int");

                    b.Property<int?>("ResolvedById")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OrderEntityContainerId");

                    b.HasIndex("PlacedById");

                    b.HasIndex("ResolvedById");

                    b.ToTable("Orders", (string)null);
                });

            modelBuilder.Entity("PharmacyApi.Models.Domain.OrderEntityContainer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.HasKey("Id");

                    b.ToTable("OrderContainers", (string)null);
                });

            modelBuilder.Entity("PharmacyApi.Models.Domain.OrderedDrug", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("DrugId")
                        .HasColumnType("int");

                    b.Property<int?>("OrderId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DrugId");

                    b.HasIndex("OrderId");

                    b.ToTable("OrderedDrugs", (string)null);
                });

            modelBuilder.Entity("PharmacyApi.Models.Domain.Pharmacy", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OrderContainerId")
                        .HasColumnType("int");

                    b.Property<int>("StorageId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OrderContainerId");

                    b.HasIndex("StorageId");

                    b.ToTable("Pharmacies", (string)null);
                });

            modelBuilder.Entity("PharmacyApi.Models.Domain.StoredDrug", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("DrugId")
                        .HasColumnType("int");

                    b.Property<int>("DrugStorageId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DrugId");

                    b.HasIndex("DrugStorageId");

                    b.ToTable("StoredDrugs", (string)null);
                });

            modelBuilder.Entity("PharmacyApi.Models.Domain.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("HospitalId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PharmacyId")
                        .HasColumnType("int");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("HospitalId");

                    b.HasIndex("PharmacyId");

                    b.ToTable("Users", (string)null);
                });

            modelBuilder.Entity("PharmacyApi.Models.Domain.Hospital", b =>
                {
                    b.HasOne("PharmacyApi.Models.Domain.OrderEntityContainer", "OrderContainer")
                        .WithMany()
                        .HasForeignKey("OrderContainerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("OrderContainer");
                });

            modelBuilder.Entity("PharmacyApi.Models.Domain.Order", b =>
                {
                    b.HasOne("PharmacyApi.Models.Domain.OrderEntityContainer", null)
                        .WithMany("Orders")
                        .HasForeignKey("OrderEntityContainerId");

                    b.HasOne("PharmacyApi.Models.Domain.User", "PlacedBy")
                        .WithMany()
                        .HasForeignKey("PlacedById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PharmacyApi.Models.Domain.User", "ResolvedBy")
                        .WithMany()
                        .HasForeignKey("ResolvedById");

                    b.Navigation("PlacedBy");

                    b.Navigation("ResolvedBy");
                });

            modelBuilder.Entity("PharmacyApi.Models.Domain.OrderedDrug", b =>
                {
                    b.HasOne("PharmacyApi.Models.Domain.Drug", "Drug")
                        .WithMany()
                        .HasForeignKey("DrugId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PharmacyApi.Models.Domain.Order", null)
                        .WithMany("OrderedDrugs")
                        .HasForeignKey("OrderId");

                    b.Navigation("Drug");
                });

            modelBuilder.Entity("PharmacyApi.Models.Domain.Pharmacy", b =>
                {
                    b.HasOne("PharmacyApi.Models.Domain.OrderEntityContainer", "OrderContainer")
                        .WithMany()
                        .HasForeignKey("OrderContainerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PharmacyApi.Models.Domain.DrugStorage", "Storage")
                        .WithMany()
                        .HasForeignKey("StorageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("OrderContainer");

                    b.Navigation("Storage");
                });

            modelBuilder.Entity("PharmacyApi.Models.Domain.StoredDrug", b =>
                {
                    b.HasOne("PharmacyApi.Models.Domain.Drug", "Drug")
                        .WithMany()
                        .HasForeignKey("DrugId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PharmacyApi.Models.Domain.DrugStorage", "Storage")
                        .WithMany("StoredDrugs")
                        .HasForeignKey("DrugStorageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Drug");

                    b.Navigation("Storage");
                });

            modelBuilder.Entity("PharmacyApi.Models.Domain.User", b =>
                {
                    b.HasOne("PharmacyApi.Models.Domain.Hospital", "Hospital")
                        .WithMany()
                        .HasForeignKey("HospitalId");

                    b.HasOne("PharmacyApi.Models.Domain.Pharmacy", "Pharmacy")
                        .WithMany()
                        .HasForeignKey("PharmacyId");

                    b.Navigation("Hospital");

                    b.Navigation("Pharmacy");
                });

            modelBuilder.Entity("PharmacyApi.Models.Domain.DrugStorage", b =>
                {
                    b.Navigation("StoredDrugs");
                });

            modelBuilder.Entity("PharmacyApi.Models.Domain.Order", b =>
                {
                    b.Navigation("OrderedDrugs");
                });

            modelBuilder.Entity("PharmacyApi.Models.Domain.OrderEntityContainer", b =>
                {
                    b.Navigation("Orders");
                });
#pragma warning restore 612, 618
        }
    }
}
